# Import required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load dataset
df = pd.read_csv("C:\\Users\\ayesh\\Downloads\\car data.csv")

# Display first few rows
print("üîç Dataset Preview:")
print(df.head())

# Display column info
print("\nüìä Dataset Info:")
print(df.info())

# Check for nulls
print("\nüßπ Missing Values:")
print(df.isnull().sum())

# Rename columns (optional)
df.columns = [col.strip().lower().replace(' ', '_') for col in df.columns]

# Feature Engineering
# Create new column: car_age
df['car_age'] = 2025 - df['year']  # Assuming current year is 2025
df.drop('year', axis=1, inplace=True)

# Drop 'car_name' (not useful for prediction)
df.drop('car_name', axis=1, inplace=True)

# Define features and target
X = df.drop('selling_price', axis=1)
y = df['selling_price']

# Identify categorical columns
cat_cols = X.select_dtypes(include='object').columns.tolist()

# OneHotEncoding for categorical features
column_transformer = ColumnTransformer(
    transformers=[('encoder', OneHotEncoder(drop='first'), cat_cols)],
    remainder='passthrough'
)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit encoder and transform features
X_train_enc = column_transformer.fit_transform(X_train)
X_test_enc = column_transformer.transform(X_test)

# Train the model
model = RandomForestRegressor(random_state=42)
model.fit(X_train_enc, y_train)

# Predict
y_pred = model.predict(X_test_enc)

# Evaluate
print("\nüìà Model Evaluation:")
print(f"MAE:  {mean_absolute_error(y_test, y_pred):.2f}")
print(f"MSE:  {mean_squared_error(y_test, y_pred):.2f}")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred)):.2f}")
print(f"R¬≤ Score: {r2_score(y_test, y_pred):.4f}")

# Visualize Actual vs Predicted
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Car Prices")
plt.grid(True)
plt.tight_layout()
plt.show()
